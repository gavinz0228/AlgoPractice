"""
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200
"""


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:
        if not head:
            return head
        curr = head
        prev = None
        target = None
        target_prev = None
        need_to_move = []
        while curr:
            if curr.val >= x and not target:
                target = curr
                target_prev = prev
                prev = curr
            elif target and curr.val < x:
                need_to_move.append(curr)
                prev.next = curr.next
            else:
                prev = curr
            curr = curr.next

        if need_to_move:
            for i, n in enumerate(need_to_move[:-1]):
                n.next = need_to_move[i + 1]
            need_to_move[-1].next = target
            if not target_prev:
                head = need_to_move[0]
            else:
                target_prev.next = need_to_move[0]
        return head
            
